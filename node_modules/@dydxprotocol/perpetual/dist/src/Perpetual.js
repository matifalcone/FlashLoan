"use strict";
/*

    Copyright 2020 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var web3_1 = __importDefault(require("web3"));
var types_1 = require("./lib/types");
var Contracts_1 = require("./modules/Contracts");
var Logs_1 = require("./modules/Logs");
var Proxy_1 = require("./modules/Proxy");
var Admin_1 = require("./modules/Admin");
var FinalSettlement_1 = require("./modules/FinalSettlement");
var FundingOracle_1 = require("./modules/FundingOracle");
var PriceOracle_1 = require("./modules/PriceOracle");
var Relayer_1 = require("./modules/Relayer");
var Deleveraging_1 = require("./modules/Deleveraging");
var Liquidation_1 = require("./modules/Liquidation");
var LiquidatorProxy_1 = require("./modules/LiquidatorProxy");
var Getters_1 = require("./modules/Getters");
var Margin_1 = require("./modules/Margin");
var Operator_1 = require("./modules/Operator");
var Orders_1 = require("./modules/Orders");
var Token_1 = require("./modules/Token");
var Trade_1 = require("./modules/Trade");
var Api_1 = require("./modules/Api");
var Perpetual = /** @class */ (function () {
    function Perpetual(provider, networkId, options) {
        var _this = this;
        if (networkId === void 0) { networkId = types_1.Networks.MAINNET; }
        if (options === void 0) { options = {}; }
        this.web3 = new web3_1.default(provider);
        this.contracts = this.getContracts(provider, networkId, options.sendOptions);
        this.proxy = new Proxy_1.Proxy(this.contracts);
        this.admin = new Admin_1.Admin(this.contracts);
        this.finalSettlement = new FinalSettlement_1.FinalSettlement(this.contracts);
        this.fundingOracle = new FundingOracle_1.FundingOracle(this.contracts);
        this.priceOracle = new PriceOracle_1.PriceOracle(this.contracts);
        this.relayer = new Relayer_1.Relayer(this.contracts);
        this.deleveraging = new Deleveraging_1.Deleveraging(this.contracts);
        this.liquidation = new Liquidation_1.Liquidation(this.contracts);
        this.liquidatorProxy = new LiquidatorProxy_1.LiquidatorProxy(this.contracts);
        this.getters = new Getters_1.Getters(this.contracts);
        this.logs = new Logs_1.Logs(this.contracts, this.web3);
        this.margin = new Margin_1.Margin(this.contracts);
        this.operator = new Operator_1.Operator(this.contracts);
        this.orders = new Orders_1.Orders(this.contracts, this.web3, networkId);
        this.token = new Token_1.Token(this.contracts);
        this.trade = new Trade_1.Trade(this.contracts, this.orders);
        this.api = new Api_1.Api(this.orders, options.apiOptions);
        if (options.accounts) {
            options.accounts.forEach(function (a) { return _this.loadAccount(a); });
        }
    }
    Perpetual.prototype.setProvider = function (provider, networkId) {
        if (networkId === void 0) { networkId = types_1.Networks.MAINNET; }
        this.web3.setProvider(provider);
        this.contracts.setProvider(provider, networkId);
    };
    Perpetual.prototype.setDefaultAccount = function (account) {
        this.web3.eth.defaultAccount = account;
        this.contracts.setDefaultAccount(account);
    };
    Perpetual.prototype.getDefaultAccount = function () {
        return this.web3.eth.defaultAccount;
    };
    Perpetual.prototype.loadAccount = function (account) {
        var newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);
        if (!newAccount
            || (account.address
                && account.address.toLowerCase() !== newAccount.address.toLowerCase())) {
            throw new Error("Loaded account address mismatch.\n        Expected " + account.address + ", got " + (newAccount ? newAccount.address : null));
        }
    };
    // ============ Helper Functions ============
    Perpetual.prototype.getContracts = function (provider, networkId, sendOptions) {
        return new Contracts_1.Contracts(provider, networkId, this.web3, sendOptions);
    };
    return Perpetual;
}());
exports.Perpetual = Perpetual;
//# sourceMappingURL=Perpetual.js.map