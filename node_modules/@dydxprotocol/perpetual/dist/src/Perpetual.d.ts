import Web3 from 'web3';
import { address, EthereumAccount, Provider, PerpetualOptions, SendOptions } from './lib/types';
import { Contracts } from './modules/Contracts';
import { Logs } from './modules/Logs';
import { Proxy } from './modules/Proxy';
import { Admin } from './modules/Admin';
import { FinalSettlement } from './modules/FinalSettlement';
import { FundingOracle } from './modules/FundingOracle';
import { PriceOracle } from './modules/PriceOracle';
import { Relayer } from './modules/Relayer';
import { Deleveraging } from './modules/Deleveraging';
import { Liquidation } from './modules/Liquidation';
import { LiquidatorProxy } from './modules/LiquidatorProxy';
import { Getters } from './modules/Getters';
import { Margin } from './modules/Margin';
import { Operator } from './modules/Operator';
import { Orders } from './modules/Orders';
import { Token } from './modules/Token';
import { Trade } from './modules/Trade';
import { Api } from './modules/Api';
export declare class Perpetual {
    web3: Web3;
    contracts: Contracts;
    proxy: Proxy;
    admin: Admin;
    finalSettlement: FinalSettlement;
    fundingOracle: FundingOracle;
    priceOracle: PriceOracle;
    relayer: Relayer;
    deleveraging: Deleveraging;
    liquidation: Liquidation;
    liquidatorProxy: LiquidatorProxy;
    getters: Getters;
    logs: Logs;
    margin: Margin;
    operator: Operator;
    orders: Orders;
    token: Token;
    trade: Trade;
    api: Api;
    constructor(provider: Provider, networkId?: number, options?: PerpetualOptions);
    setProvider(provider: Provider, networkId?: number): void;
    setDefaultAccount(account: address): void;
    getDefaultAccount(): address;
    loadAccount(account: EthereumAccount): void;
    protected getContracts(provider: Provider, networkId: number, sendOptions?: SendOptions): Contracts;
}
