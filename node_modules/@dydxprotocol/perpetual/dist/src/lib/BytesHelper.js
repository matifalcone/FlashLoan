"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var web3_1 = __importDefault(require("web3"));
function combineHexStrings() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return "0x" + args.map(stripHexPrefix).join('');
}
exports.combineHexStrings = combineHexStrings;
function addressToBytes32(input) {
    return "0x000000000000000000000000" + stripHexPrefix(input);
}
exports.addressToBytes32 = addressToBytes32;
function bnToBytes32(bn) {
    return "0x" + new bignumber_js_1.default(bn).toString(16).padStart(64, '0');
}
exports.bnToBytes32 = bnToBytes32;
function boolToBytes32(b) {
    return "0x" + '0'.repeat(63) + (b ? '1' : 0);
}
exports.boolToBytes32 = boolToBytes32;
function hashString(input) {
    return web3_1.default.utils.soliditySha3({ t: 'string', v: input });
}
exports.hashString = hashString;
function hashBytes(input) {
    // javascript soliditySha3 has a problem with empty bytes arrays, so manually return the same
    // value that solidity does for keccak256 of an empty bytes array
    if (!stripHexPrefix(input)) {
        return '0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
    }
    return web3_1.default.utils.soliditySha3({ t: 'bytes', v: "0x" + stripHexPrefix(input) });
}
exports.hashBytes = hashBytes;
function stripHexPrefix(input) {
    if (input.startsWith('0x')) {
        return input.slice(2);
    }
    return input;
}
exports.stripHexPrefix = stripHexPrefix;
function addressesAreEqual(addressOne, addressTwo) {
    return addressOne && addressTwo &&
        (stripHexPrefix(addressOne).toLowerCase() === stripHexPrefix(addressTwo).toLowerCase());
}
exports.addressesAreEqual = addressesAreEqual;
//# sourceMappingURL=BytesHelper.js.map