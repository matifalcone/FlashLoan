import { address, ApiMarketName, BigNumberable, SignedOrder, ApiOrder, ApiSide, ApiMarketMessage, ApiAccount, ApiOptions, ApiOrderOnOrderbook } from '../lib/types';
import { Orders } from './Orders';
export declare class Api {
    private endpoint;
    private perpetualOrders;
    private timeout;
    constructor(perpetualOrders: Orders, apiOptions?: ApiOptions);
    placePerpetualOrder({ order: { side, amount, price, maker, taker, expiration, limitFee, salt, }, market, fillOrKill, postOnly, clientId, cancelId, cancelAmountOnRevert, }: {
        order: {
            side: ApiSide;
            amount: BigNumberable;
            price: BigNumberable;
            maker: address;
            taker: address;
            expiration: BigNumberable;
            limitFee?: BigNumberable;
            salt?: BigNumberable;
        };
        market: ApiMarketName;
        fillOrKill?: boolean;
        postOnly?: boolean;
        clientId?: string;
        cancelId?: string;
        cancelAmountOnRevert?: boolean;
    }): Promise<{
        order: ApiOrder;
    }>;
    /**
     * Creates but does not place a signed perpetualOrder
     */
    createPerpetualOrder({ market, side, amount, price, maker, taker, expiration, postOnly, limitFee, salt, }: {
        market: ApiMarketName;
        side: ApiSide;
        amount: BigNumberable;
        price: BigNumberable;
        maker: address;
        taker: address;
        expiration: BigNumberable;
        postOnly: boolean;
        limitFee?: BigNumberable;
        salt?: BigNumberable;
    }): Promise<SignedOrder>;
    /**
     * Submits an already signed perpetualOrder
     */
    submitPerpetualOrder({ order, market, fillOrKill, postOnly, cancelId, clientId, cancelAmountOnRevert, }: {
        order: SignedOrder;
        market: ApiMarketName;
        fillOrKill?: boolean;
        postOnly?: boolean;
        cancelId?: string;
        clientId?: string;
        cancelAmountOnRevert?: boolean;
    }): Promise<{
        order: ApiOrder;
    }>;
    cancelOrder({ orderId, maker, }: {
        orderId: string;
        maker: address;
    }): Promise<{
        order: ApiOrder;
    }>;
    getMarkets(): Promise<{
        markets: ApiMarketMessage[];
    }>;
    getAccountBalances({ accountOwner, }: {
        accountOwner: address;
    }): Promise<ApiAccount>;
    getOrderbook({ market, }: {
        market: ApiMarketName;
    }): Promise<{
        bids: ApiOrderOnOrderbook[];
        asks: ApiOrderOnOrderbook[];
    }>;
}
