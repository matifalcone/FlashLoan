"use strict";
/*

    Copyright 2020 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var Constants_1 = require("../lib/Constants");
var Token = /** @class */ (function () {
    function Token(contracts) {
        this.contracts = contracts;
        this.tokens = {};
    }
    Token.prototype.getAllowance = function (tokenAddress, ownerAddress, spenderAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token, allowance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.getToken(tokenAddress);
                        return [4 /*yield*/, this.contracts.call(token.methods.allowance(ownerAddress, spenderAddress), options)];
                    case 1:
                        allowance = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.default(allowance)];
                }
            });
        });
    };
    Token.prototype.getBalance = function (tokenAddress, ownerAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token, balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.getToken(tokenAddress);
                        return [4 /*yield*/, this.contracts.call(token.methods.balanceOf(ownerAddress), options)];
                    case 1:
                        balance = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.default(balance)];
                }
            });
        });
    };
    Token.prototype.getTotalSupply = function (tokenAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token, supply;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.getToken(tokenAddress);
                        return [4 /*yield*/, this.contracts.call(token.methods.totalSupply(), options)];
                    case 1:
                        supply = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.default(supply)];
                }
            });
        });
    };
    Token.prototype.getName = function (tokenAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = this.getToken(tokenAddress);
                return [2 /*return*/, this.contracts.call(token.methods.name(), options)];
            });
        });
    };
    Token.prototype.getSymbol = function (tokenAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = this.getToken(tokenAddress);
                return [2 /*return*/, this.contracts.call(token.methods.symbol(), options)];
            });
        });
    };
    Token.prototype.getDecimals = function (tokenAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            var token, decimals;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.getToken(tokenAddress);
                        return [4 /*yield*/, this.contracts.call(token.methods.decimals(), options)];
                    case 1:
                        decimals = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.default(decimals)];
                }
            });
        });
    };
    Token.prototype.getPerpetualAllowance = function (tokenAddress, ownerAddress, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getAllowance(tokenAddress, ownerAddress, this.contracts.perpetualV1.options.address, options)];
            });
        });
    };
    Token.prototype.setAllowance = function (tokenAddress, ownerAddress, spenderAddress, amount, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = this.getToken(tokenAddress);
                return [2 /*return*/, this.contracts.send(token.methods.approve(spenderAddress, new bignumber_js_1.default(amount).toFixed(0)), __assign(__assign({}, options), { from: ownerAddress }))];
            });
        });
    };
    Token.prototype.setPerpetualAllowance = function (tokenAddress, ownerAddress, amount, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setAllowance(tokenAddress, ownerAddress, this.contracts.perpetualV1.options.address, amount, options)];
            });
        });
    };
    Token.prototype.setMaximumAllowance = function (tokenAddress, ownerAddress, spenderAddress, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setAllowance(tokenAddress, ownerAddress, spenderAddress, Constants_1.INTEGERS.ONES_255, options)];
            });
        });
    };
    Token.prototype.setMaximumPerpetualAllowance = function (tokenAddress, ownerAddress, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setAllowance(tokenAddress, ownerAddress, this.contracts.perpetualV1.options.address, Constants_1.INTEGERS.ONES_255, options)];
            });
        });
    };
    Token.prototype.unsetPerpetualAllowance = function (tokenAddress, ownerAddress, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.setAllowance(tokenAddress, ownerAddress, this.contracts.perpetualV1.options.address, Constants_1.INTEGERS.ZERO, options)];
            });
        });
    };
    Token.prototype.transfer = function (tokenAddress, fromAddress, toAddress, amount, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = this.getToken(tokenAddress);
                return [2 /*return*/, this.contracts.send(token.methods.transfer(toAddress, new bignumber_js_1.default(amount).toFixed(0)), __assign(__assign({}, options), { from: fromAddress }))];
            });
        });
    };
    Token.prototype.transferFrom = function (tokenAddress, fromAddress, toAddress, senderAddress, amount, options) {
        if (options === void 0) { options = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                token = this.getToken(tokenAddress);
                return [2 /*return*/, this.contracts.send(token.methods.transferFrom(fromAddress, toAddress, new bignumber_js_1.default(amount).toFixed(0)), __assign(__assign({}, options), { from: senderAddress }))];
            });
        });
    };
    // ============ Helper Functions ============
    Token.prototype.getToken = function (tokenAddress) {
        if (this.tokens[tokenAddress]) {
            return this.tokens[tokenAddress];
        }
        var token = this.tokenContract();
        var contract = token.clone();
        contract.options.address = tokenAddress;
        this.tokens[tokenAddress] = contract;
        return contract;
    };
    Token.prototype.tokenContract = function () {
        return this.contracts.erc20;
    };
    return Token;
}());
exports.Token = Token;
//# sourceMappingURL=Token.js.map