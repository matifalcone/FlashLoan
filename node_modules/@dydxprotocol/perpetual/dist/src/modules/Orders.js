"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var es6_promisify_1 = require("es6-promisify");
var web3_1 = __importDefault(require("web3"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var BytesHelper_1 = require("../lib/BytesHelper");
var SignatureHelper_1 = require("../lib/SignatureHelper");
var types_1 = require("../lib/types");
var Constants_1 = require("../lib/Constants");
var EIP712_ORDER_STRUCT = [
    { type: 'bytes32', name: 'flags' },
    { type: 'uint256', name: 'amount' },
    { type: 'uint256', name: 'limitPrice' },
    { type: 'uint256', name: 'triggerPrice' },
    { type: 'uint256', name: 'limitFee' },
    { type: 'address', name: 'maker' },
    { type: 'address', name: 'taker' },
    { type: 'uint256', name: 'expiration' },
];
var EIP712_ORDER_STRUCT_STRING = 'Order(' +
    'bytes32 flags,' +
    'uint256 amount,' +
    'uint256 limitPrice,' +
    'uint256 triggerPrice,' +
    'uint256 limitFee,' +
    'address maker,' +
    'address taker,' +
    'uint256 expiration' +
    ')';
var EIP712_CANCEL_ORDER_STRUCT = [
    { type: 'string', name: 'action' },
    { type: 'bytes32[]', name: 'orderHashes' },
];
var EIP712_CANCEL_ORDER_STRUCT_STRING = 'CancelLimitOrder(' +
    'string action,' +
    'bytes32[] orderHashes' +
    ')';
var Orders = /** @class */ (function () {
    // ============ Constructor ============
    function Orders(contracts, web3, networkId) {
        this.web3 = web3;
        this.contracts = contracts;
        this.networkId = networkId;
    }
    // ============ On-Chain Approve / On-Chain Cancel ============
    /**
     * Sends an transaction to pre-approve an order on-chain (so that no signature is required when
     * filling the order).
     */
    Orders.prototype.approveOrder = function (order, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stringifiedOrder;
            return __generator(this, function (_a) {
                stringifiedOrder = this.orderToSolidity(order);
                return [2 /*return*/, this.contracts.send(this.contracts.p1Orders.methods.approveOrder(stringifiedOrder), options)];
            });
        });
    };
    /**
     * Sends an transaction to cancel an order on-chain.
     */
    Orders.prototype.cancelOrder = function (order, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stringifiedOrder;
            return __generator(this, function (_a) {
                stringifiedOrder = this.orderToSolidity(order);
                return [2 /*return*/, this.contracts.send(this.contracts.p1Orders.methods.cancelOrder(stringifiedOrder), options)];
            });
        });
    };
    // ============ Getter Contract Methods ============
    /**
     * Gets the status and the current filled amount (in makerAmount) of all given orders.
     */
    Orders.prototype.getOrdersStatus = function (orders, options) {
        return __awaiter(this, void 0, void 0, function () {
            var orderHashes, states;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        orderHashes = orders.map(function (order) { return _this.getOrderHash(order); });
                        return [4 /*yield*/, this.contracts.call(this.contracts.p1Orders.methods.getOrdersStatus(orderHashes), options)];
                    case 1:
                        states = _a.sent();
                        return [2 /*return*/, states.map(function (state) {
                                return {
                                    status: parseInt(state[0], 10),
                                    filledAmount: new bignumber_js_1.default(state[1]),
                                };
                            })];
                }
            });
        });
    };
    // ============ Off-Chain Helper Functions ============
    /**
     * Estimate the maker's collateralization after executing a sequence of orders.
     *
     * The `maker` of every order must be the same. This function does not make any on-chain calls,
     * so all information must be passed in, including the oracle price and remaining amounts
     * on the orders. Orders are assumed to be filled at the limit price and limit fee.
     *
     * Returns the ending collateralization ratio for the account, or BigNumber(Infinity) if the
     * account does not end with any negative balances.
     *
     * @param  initialBalance  The initial margin and position balances of the maker account.
     * @param  oraclePrice     The price at which to calculate collateralization.
     * @param  orders          A sequence of orders, with the same maker, to be hypothetically filled.
     * @param  fillAmounts     The corresponding fill amount for each order, denominated in the token
     *                         spent by the maker--quote currency when buying, and base when selling.
     */
    Orders.prototype.getAccountCollateralizationAfterMakingOrders = function (initialBalance, oraclePrice, orders, makerTokenFillAmounts) {
        var runningBalance = initialBalance.copy();
        // For each order, determine the effect on the balance by following the math in P1Orders.sol.
        for (var i = 0; i < orders.length; i += 1) {
            var order = orders[i];
            var positionFillAmount = void 0;
            if (order.isBuy) {
                positionFillAmount = makerTokenFillAmounts[i].dividedBy(order.limitPrice.value);
            }
            else {
                positionFillAmount = makerTokenFillAmounts[i];
            }
            // Assume orders are filled at the limit price and limit fee.
            // Order fee is denoted as a percentage of execution price.
            var fee = order.limitFee.times(order.limitPrice.value);
            var marginPerPosition = order.isBuy
                ? order.limitPrice.plus(fee.value)
                : order.limitPrice.minus(fee.value);
            var marginAmount = positionFillAmount.times(marginPerPosition.value);
            if (order.isBuy) {
                runningBalance.margin = runningBalance.margin.minus(marginAmount);
                runningBalance.position = runningBalance.position.plus(positionFillAmount);
            }
            else {
                runningBalance.margin = runningBalance.margin.plus(marginAmount);
                runningBalance.position = runningBalance.position.minus(positionFillAmount);
            }
        }
        return runningBalance.getCollateralization(oraclePrice);
    };
    Orders.prototype.getFeeForOrder = function (amount, isTaker) {
        if (isTaker === void 0) { isTaker = true; }
        if (!isTaker) {
            return types_1.Fee.fromBips('-2.5');
        }
        var isSmall = amount.lt('0.1e8');
        return isSmall
            ? types_1.Fee.fromBips('50.0')
            : types_1.Fee.fromBips('7.5');
    };
    // ============ Signing Methods ============
    Orders.prototype.getSignedOrder = function (order, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var typedSignature;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.signOrder(order, signingMethod)];
                    case 1:
                        typedSignature = _a.sent();
                        return [2 /*return*/, __assign(__assign({}, order), { typedSignature: typedSignature })];
                }
            });
        });
    };
    /**
     * Sends order to current provider for signing. Can sign locally if the signing account is
     * loaded into web3 and SigningMethod.Hash is used.
     */
    Orders.prototype.signOrder = function (order, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, orderHash, rawSignature, hashSig, unsafeHashSig;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = signingMethod;
                        switch (_a) {
                            case types_1.SigningMethod.Hash: return [3 /*break*/, 1];
                            case types_1.SigningMethod.UnsafeHash: return [3 /*break*/, 1];
                            case types_1.SigningMethod.Compatibility: return [3 /*break*/, 1];
                            case types_1.SigningMethod.TypedData: return [3 /*break*/, 3];
                            case types_1.SigningMethod.MetaMask: return [3 /*break*/, 3];
                            case types_1.SigningMethod.MetaMaskLatest: return [3 /*break*/, 3];
                            case types_1.SigningMethod.CoinbaseWallet: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 1:
                        orderHash = this.getOrderHash(order);
                        return [4 /*yield*/, this.web3.eth.sign(orderHash, order.maker)];
                    case 2:
                        rawSignature = _b.sent();
                        hashSig = SignatureHelper_1.createTypedSignature(rawSignature, SignatureHelper_1.SIGNATURE_TYPES.DECIMAL);
                        if (signingMethod === types_1.SigningMethod.Hash) {
                            return [2 /*return*/, hashSig];
                        }
                        unsafeHashSig = SignatureHelper_1.createTypedSignature(rawSignature, SignatureHelper_1.SIGNATURE_TYPES.NO_PREPEND);
                        if (signingMethod === types_1.SigningMethod.UnsafeHash) {
                            return [2 /*return*/, unsafeHashSig];
                        }
                        if (this.orderByHashHasValidSignature(orderHash, unsafeHashSig, order.maker)) {
                            return [2 /*return*/, unsafeHashSig];
                        }
                        return [2 /*return*/, hashSig];
                    case 3: return [2 /*return*/, this.ethSignTypedOrderInternal(order, signingMethod)];
                    case 4: throw new Error("Invalid signing method " + signingMethod);
                }
            });
        });
    };
    /**
     * Sends order to current provider for signing of a cancel message. Can sign locally if the
     * signing account is loaded into web3 and SigningMethod.Hash is used.
     */
    Orders.prototype.signCancelOrder = function (order, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.signCancelOrderByHash(this.getOrderHash(order), order.maker, signingMethod)];
            });
        });
    };
    /**
     * Sends orderHash to current provider for signing of a cancel message. Can sign locally if
     * the signing account is loaded into web3 and SigningMethod.Hash is used.
     */
    Orders.prototype.signCancelOrderByHash = function (orderHash, signer, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, cancelHash, rawSignature, hashSig, unsafeHashSig;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = signingMethod;
                        switch (_a) {
                            case types_1.SigningMethod.Hash: return [3 /*break*/, 1];
                            case types_1.SigningMethod.UnsafeHash: return [3 /*break*/, 1];
                            case types_1.SigningMethod.Compatibility: return [3 /*break*/, 1];
                            case types_1.SigningMethod.TypedData: return [3 /*break*/, 3];
                            case types_1.SigningMethod.MetaMask: return [3 /*break*/, 3];
                            case types_1.SigningMethod.MetaMaskLatest: return [3 /*break*/, 3];
                            case types_1.SigningMethod.CoinbaseWallet: return [3 /*break*/, 3];
                        }
                        return [3 /*break*/, 4];
                    case 1:
                        cancelHash = this.orderHashToCancelOrderHash(orderHash);
                        return [4 /*yield*/, this.web3.eth.sign(cancelHash, signer)];
                    case 2:
                        rawSignature = _b.sent();
                        hashSig = SignatureHelper_1.createTypedSignature(rawSignature, SignatureHelper_1.SIGNATURE_TYPES.DECIMAL);
                        if (signingMethod === types_1.SigningMethod.Hash) {
                            return [2 /*return*/, hashSig];
                        }
                        unsafeHashSig = SignatureHelper_1.createTypedSignature(rawSignature, SignatureHelper_1.SIGNATURE_TYPES.NO_PREPEND);
                        if (signingMethod === types_1.SigningMethod.UnsafeHash) {
                            return [2 /*return*/, unsafeHashSig];
                        }
                        if (this.cancelOrderByHashHasValidSignature(orderHash, unsafeHashSig, signer)) {
                            return [2 /*return*/, unsafeHashSig];
                        }
                        return [2 /*return*/, hashSig];
                    case 3: return [2 /*return*/, this.ethSignTypedCancelOrderInternal(orderHash, signer, signingMethod)];
                    case 4: throw new Error("Invalid signing method " + signingMethod);
                }
            });
        });
    };
    // ============ Signature Verification ============
    /**
     * Returns true if the order object has a non-null valid signature from the maker of the order.
     */
    Orders.prototype.orderHasValidSignature = function (order) {
        return this.orderByHashHasValidSignature(this.getOrderHash(order), order.typedSignature, order.maker);
    };
    /**
     * Returns true if the order hash has a non-null valid signature from a particular signer.
     */
    Orders.prototype.orderByHashHasValidSignature = function (orderHash, typedSignature, expectedSigner) {
        var signer = SignatureHelper_1.ecRecoverTypedSignature(orderHash, typedSignature);
        return BytesHelper_1.addressesAreEqual(signer, expectedSigner);
    };
    /**
     * Returns true if the cancel order message has a valid signature.
     */
    Orders.prototype.cancelOrderHasValidSignature = function (order, typedSignature) {
        return this.cancelOrderByHashHasValidSignature(this.getOrderHash(order), typedSignature, order.maker);
    };
    /**
     * Returns true if the cancel order message has a valid signature.
     */
    Orders.prototype.cancelOrderByHashHasValidSignature = function (orderHash, typedSignature, expectedSigner) {
        var cancelHash = this.orderHashToCancelOrderHash(orderHash);
        var signer = SignatureHelper_1.ecRecoverTypedSignature(cancelHash, typedSignature);
        return BytesHelper_1.addressesAreEqual(signer, expectedSigner);
    };
    // ============ Hashing Functions ============
    /**
     * Returns the final signable EIP712 hash for approving an order.
     */
    Orders.prototype.getOrderHash = function (order) {
        var structHash = web3_1.default.utils.soliditySha3({ t: 'bytes32', v: BytesHelper_1.hashString(EIP712_ORDER_STRUCT_STRING) }, { t: 'bytes32', v: this.getOrderFlags(order) }, { t: 'uint256', v: order.amount.toFixed(0) }, { t: 'uint256', v: order.limitPrice.toSolidity() }, { t: 'uint256', v: order.triggerPrice.toSolidity() }, { t: 'uint256', v: order.limitFee.toSolidity() }, { t: 'bytes32', v: BytesHelper_1.addressToBytes32(order.maker) }, { t: 'bytes32', v: BytesHelper_1.addressToBytes32(order.taker) }, { t: 'uint256', v: order.expiration.toFixed(0) });
        return this.getEIP712Hash(structHash);
    };
    /**
     * Given some order hash, returns the hash of a cancel-order message.
     */
    Orders.prototype.orderHashToCancelOrderHash = function (orderHash) {
        var structHash = web3_1.default.utils.soliditySha3({ t: 'bytes32', v: BytesHelper_1.hashString(EIP712_CANCEL_ORDER_STRUCT_STRING) }, { t: 'bytes32', v: BytesHelper_1.hashString('Cancel Orders') }, { t: 'bytes32', v: web3_1.default.utils.soliditySha3({ t: 'bytes32', v: orderHash }) });
        return this.getEIP712Hash(structHash);
    };
    /**
     * Returns the EIP712 domain separator hash.
     */
    Orders.prototype.getDomainHash = function () {
        return web3_1.default.utils.soliditySha3({ t: 'bytes32', v: BytesHelper_1.hashString(SignatureHelper_1.EIP712_DOMAIN_STRING) }, { t: 'bytes32', v: BytesHelper_1.hashString('P1Orders') }, { t: 'bytes32', v: BytesHelper_1.hashString('1.0') }, { t: 'uint256', v: "" + this.networkId }, { t: 'bytes32', v: BytesHelper_1.addressToBytes32(this.contracts.p1Orders.options.address) });
    };
    /**
     * Returns a signable EIP712 Hash of a struct
     */
    Orders.prototype.getEIP712Hash = function (structHash) {
        return web3_1.default.utils.soliditySha3({ t: 'bytes2', v: '0x1901' }, { t: 'bytes32', v: this.getDomainHash() }, { t: 'bytes32', v: structHash });
    };
    // ============ To-Bytes Functions ============
    Orders.prototype.orderToBytes = function (order) {
        var solidityOrder = this.orderToSolidity(order);
        return this.web3.eth.abi.encodeParameters(EIP712_ORDER_STRUCT.map(function (arg) { return arg.type; }), EIP712_ORDER_STRUCT.map(function (arg) { return solidityOrder[arg.name]; }));
    };
    Orders.prototype.fillToTradeData = function (order, amount, price, fee) {
        var orderData = this.orderToBytes(order);
        var signatureData = order.typedSignature + '0'.repeat(60);
        var fillData = this.web3.eth.abi.encodeParameters([
            'uint256',
            'uint256',
            'uint256',
            'bool',
        ], [
            amount.toFixed(0),
            price.toSolidity(),
            fee.toSolidity(),
            fee.isNegative(),
        ]);
        return BytesHelper_1.combineHexStrings(orderData, fillData, signatureData);
    };
    // ============ Private Helper Functions ============
    Orders.prototype.orderToSolidity = function (order) {
        return {
            flags: this.getOrderFlags(order),
            amount: order.amount.toFixed(0),
            limitPrice: order.limitPrice.toSolidity(),
            triggerPrice: order.triggerPrice.toSolidity(),
            limitFee: order.limitFee.toSolidity(),
            maker: order.maker,
            taker: order.taker,
            expiration: order.expiration.toFixed(0),
        };
    };
    Orders.prototype.getDomainData = function () {
        return {
            name: 'P1Orders',
            version: '1.0',
            chainId: this.networkId,
            verifyingContract: this.contracts.p1Orders.options.address,
        };
    };
    Orders.prototype.ethSignTypedOrderInternal = function (order, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var orderData, data;
            return __generator(this, function (_a) {
                orderData = {
                    flags: this.getOrderFlags(order),
                    amount: order.amount.toFixed(0),
                    limitPrice: order.limitPrice.toSolidity(),
                    triggerPrice: order.triggerPrice.toSolidity(),
                    limitFee: order.limitFee.toSolidity(),
                    maker: order.maker,
                    taker: order.taker,
                    expiration: order.expiration.toFixed(0),
                };
                data = {
                    types: {
                        EIP712Domain: SignatureHelper_1.EIP712_DOMAIN_STRUCT,
                        Order: EIP712_ORDER_STRUCT,
                    },
                    domain: this.getDomainData(),
                    primaryType: 'Order',
                    message: orderData,
                };
                return [2 /*return*/, this.ethSignTypedDataInternal(order.maker, data, signingMethod)];
            });
        });
    };
    Orders.prototype.ethSignTypedCancelOrderInternal = function (orderHash, signer, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = {
                    types: {
                        EIP712Domain: SignatureHelper_1.EIP712_DOMAIN_STRUCT,
                        CancelLimitOrder: EIP712_CANCEL_ORDER_STRUCT,
                    },
                    domain: this.getDomainData(),
                    primaryType: 'CancelLimitOrder',
                    message: {
                        action: 'Cancel Orders',
                        orderHashes: [orderHash],
                    },
                };
                return [2 /*return*/, this.ethSignTypedDataInternal(signer, data, signingMethod)];
            });
        });
    };
    Orders.prototype.ethSignTypedDataInternal = function (signer, data, signingMethod) {
        return __awaiter(this, void 0, void 0, function () {
            var sendMethod, rpcMethod, rpcData, provider, sendAsync, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        switch (signingMethod) {
                            case types_1.SigningMethod.TypedData:
                                sendMethod = 'send';
                                rpcMethod = 'eth_signTypedData';
                                rpcData = data;
                                break;
                            case types_1.SigningMethod.MetaMask:
                                sendMethod = 'sendAsync';
                                rpcMethod = 'eth_signTypedData_v3';
                                rpcData = JSON.stringify(data);
                                break;
                            case types_1.SigningMethod.MetaMaskLatest:
                                sendMethod = 'sendAsync';
                                rpcMethod = 'eth_signTypedData_v4';
                                rpcData = JSON.stringify(data);
                                break;
                            case types_1.SigningMethod.CoinbaseWallet:
                                sendMethod = 'sendAsync';
                                rpcMethod = 'eth_signTypedData';
                                rpcData = data;
                                break;
                            default:
                                throw new Error("Invalid signing method " + signingMethod);
                        }
                        provider = this.web3.currentProvider;
                        sendAsync = es6_promisify_1.promisify(provider[sendMethod]).bind(provider);
                        return [4 /*yield*/, sendAsync({
                                method: rpcMethod,
                                params: [signer, rpcData],
                                jsonrpc: '2.0',
                                id: new Date().getTime(),
                            })];
                    case 1:
                        response = _a.sent();
                        if (response.error) {
                            throw new Error(response.error.message);
                        }
                        return [2 /*return*/, "0x" + BytesHelper_1.stripHexPrefix(response.result) + "0" + SignatureHelper_1.SIGNATURE_TYPES.NO_PREPEND];
                }
            });
        });
    };
    Orders.prototype.getOrderFlags = function (order) {
        var booleanFlag = 0
            + (order.limitFee.isNegative() ? Constants_1.ORDER_FLAGS.IS_NEGATIVE_LIMIT_FEE : 0)
            + (order.isDecreaseOnly ? Constants_1.ORDER_FLAGS.IS_DECREASE_ONLY : 0)
            + (order.isBuy ? Constants_1.ORDER_FLAGS.IS_BUY : 0);
        var saltBytes = BytesHelper_1.bnToBytes32(order.salt);
        return "0x" + saltBytes.slice(-63) + booleanFlag;
    };
    return Orders;
}());
exports.Orders = Orders;
//# sourceMappingURL=Orders.js.map