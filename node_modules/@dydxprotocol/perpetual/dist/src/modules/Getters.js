"use strict";
/*

    Copyright 2020 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var types_1 = require("../lib/types");
var Getters = /** @class */ (function () {
    function Getters(contracts) {
        this.contracts = contracts;
        this.perpetual = this.contracts.perpetualV1;
    }
    // ============ Helper Functions ============
    /**
     * Get the margin and position for an account, taking into account unsettled interest.
     */
    Getters.prototype.getNetAccountBalance = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var balance, globalIndex, localIndex, indexDiff, interest, roundedInterest, netMargin;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAccountBalance(account, options)];
                    case 1:
                        balance = _a.sent();
                        return [4 /*yield*/, this.getGlobalIndex(options)];
                    case 2:
                        globalIndex = _a.sent();
                        return [4 /*yield*/, this.getAccountIndex(account, options)];
                    case 3:
                        localIndex = _a.sent();
                        indexDiff = globalIndex.baseValue.minus(localIndex.baseValue.value);
                        interest = indexDiff.times(balance.position.negated()).value;
                        roundedInterest = interest.integerValue(bignumber_js_1.default.ROUND_FLOOR);
                        netMargin = balance.margin.plus(roundedInterest);
                        return [2 /*return*/, new types_1.Balance(netMargin, balance.position)];
                }
            });
        });
    };
    Getters.prototype.getNetAccountValues = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, balance, price;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.getNetAccountBalance(account, options),
                            this.getOraclePrice(options),
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), balance = _a[0], price = _a[1];
                        return [2 /*return*/, balance.getPositiveAndNegativeValues(price)];
                }
            });
        });
    };
    Getters.prototype.getNetAccountCollateralization = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, balance, price;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.getNetAccountBalance(account, options),
                            this.getOraclePrice(options),
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), balance = _a[0], price = _a[1];
                        return [2 /*return*/, balance.getCollateralization(price)];
                }
            });
        });
    };
    Getters.prototype.getNetAccountIsLiquidatable = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, collateralization, minCollateralization;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.getNetAccountCollateralization(account, options),
                            this.getMinCollateral(options),
                        ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), collateralization = _a[0], minCollateralization = _a[1];
                        return [2 /*return*/, collateralization.lt(minCollateralization.value)];
                }
            });
        });
    };
    // ============ Account Getters ============
    Getters.prototype.getAccountBalance = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var balance;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getAccountBalance(account), options)];
                    case 1:
                        balance = _a.sent();
                        return [2 /*return*/, types_1.Balance.fromSolidity(balance)];
                }
            });
        });
    };
    Getters.prototype.getAccountIndex = function (account, options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getAccountIndex(account), options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.solidityIndexToIndex(result)];
                }
            });
        });
    };
    Getters.prototype.getIsLocalOperator = function (account, operator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.getIsLocalOperator(account, operator), options)];
            });
        });
    };
    Getters.prototype.hasAccountPermissions = function (account, operator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.hasAccountPermissions(account, operator), options)];
            });
        });
    };
    // ============ Global Getters ============
    Getters.prototype.getAdmin = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.owner(), options)];
            });
        });
    };
    Getters.prototype.getIsGlobalOperator = function (operator, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.getIsGlobalOperator(operator), options)];
            });
        });
    };
    Getters.prototype.getTokenContract = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.getTokenContract(), options)];
            });
        });
    };
    Getters.prototype.getOracleContract = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.getOracleContract(), options)];
            });
        });
    };
    Getters.prototype.getFunderContract = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.perpetual.methods.getFunderContract(), options)];
            });
        });
    };
    Getters.prototype.getGlobalIndex = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getGlobalIndex(), options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, this.solidityIndexToIndex(result)];
                }
            });
        });
    };
    Getters.prototype.getMinCollateral = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getMinCollateral(), options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, types_1.BaseValue.fromSolidity(result)];
                }
            });
        });
    };
    Getters.prototype.getFinalSettlementEnabled = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getFinalSettlementEnabled(), options)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Getters.prototype.getOraclePrice = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.perpetual.methods.getOraclePrice(), __assign({ from: this.contracts.p1Liquidation.options.address }, options))];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, types_1.Price.fromSolidity(result)];
                }
            });
        });
    };
    // ============ Helper Functions ============
    Getters.prototype.solidityIndexToIndex = function (solidityIndex) {
        var _a = __read(solidityIndex, 3), timestamp = _a[0], isPositive = _a[1], value = _a[2];
        return {
            timestamp: new bignumber_js_1.default(timestamp),
            baseValue: types_1.BaseValue.fromSolidity(value, isPositive),
        };
    };
    return Getters;
}());
exports.Getters = Getters;
//# sourceMappingURL=Getters.js.map