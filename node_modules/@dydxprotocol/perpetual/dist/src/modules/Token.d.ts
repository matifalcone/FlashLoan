import BigNumber from 'bignumber.js';
import { Contract } from 'web3-eth-contract';
import { Contracts } from './Contracts';
import { BigNumberable, CallOptions, SendOptions, TxResult, address } from '../lib/types';
export declare class Token {
    protected contracts: Contracts;
    private tokens;
    constructor(contracts: Contracts);
    getAllowance(tokenAddress: address, ownerAddress: address, spenderAddress: address, options?: CallOptions): Promise<BigNumber>;
    getBalance(tokenAddress: address, ownerAddress: address, options?: CallOptions): Promise<BigNumber>;
    getTotalSupply(tokenAddress: address, options?: CallOptions): Promise<BigNumber>;
    getName(tokenAddress: address, options?: CallOptions): Promise<string>;
    getSymbol(tokenAddress: address, options?: CallOptions): Promise<string>;
    getDecimals(tokenAddress: address, options?: CallOptions): Promise<BigNumber>;
    getPerpetualAllowance(tokenAddress: address, ownerAddress: address, options?: CallOptions): Promise<BigNumber>;
    setAllowance(tokenAddress: address, ownerAddress: address, spenderAddress: address, amount: BigNumberable, options?: SendOptions): Promise<TxResult>;
    setPerpetualAllowance(tokenAddress: address, ownerAddress: address, amount: BigNumberable, options?: SendOptions): Promise<TxResult>;
    setMaximumAllowance(tokenAddress: address, ownerAddress: address, spenderAddress: address, options?: SendOptions): Promise<TxResult>;
    setMaximumPerpetualAllowance(tokenAddress: address, ownerAddress: address, options?: SendOptions): Promise<TxResult>;
    unsetPerpetualAllowance(tokenAddress: address, ownerAddress: address, options?: SendOptions): Promise<TxResult>;
    transfer(tokenAddress: address, fromAddress: address, toAddress: address, amount: BigNumberable, options?: SendOptions): Promise<TxResult>;
    transferFrom(tokenAddress: address, fromAddress: address, toAddress: address, senderAddress: address, amount: BigNumberable, options?: SendOptions): Promise<TxResult>;
    protected getToken(tokenAddress: string): Contract;
    protected tokenContract(): Contract;
}
