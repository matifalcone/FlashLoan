"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Deleveraging_1 = require("./Deleveraging");
var Liquidation_1 = require("./Liquidation");
var types_1 = require("../lib/types");
var TradeOperation = /** @class */ (function () {
    function TradeOperation(contracts, orders) {
        this.contracts = contracts;
        this.orders = orders;
        this.trades = [];
        this.committed = false;
    }
    // ============ Public Functions ============
    TradeOperation.prototype.fillSignedOrder = function (order, amount, price, fee) {
        var tradeData = this.orders.fillToTradeData(order, amount, price, fee);
        return this.addTradeArg({
            maker: order.maker,
            taker: order.taker,
            data: tradeData,
            trader: this.contracts.p1Orders.options.address,
        });
    };
    TradeOperation.prototype.liquidate = function (maker, taker, amount, isBuy, allOrNothing) {
        return this.addTradeArg({
            maker: maker,
            taker: taker,
            data: Liquidation_1.makeLiquidateTradeData(amount, isBuy, allOrNothing),
            trader: this.contracts.p1Liquidation.options.address,
        });
    };
    TradeOperation.prototype.deleverage = function (maker, taker, amount, isBuy, allOrNothing) {
        return this.addTradeArg({
            maker: maker,
            taker: taker,
            data: Deleveraging_1.makeDeleverageTradeData(amount, isBuy, allOrNothing),
            trader: this.contracts.p1Deleveraging.options.address,
        });
    };
    TradeOperation.prototype.commit = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var accountSet, accounts, tradeArgs;
            return __generator(this, function (_a) {
                if (this.committed) {
                    throw new Error('Operation already committed');
                }
                if (!this.trades.length) {
                    throw new Error('No tradeArgs have been added to trade');
                }
                if (options && options.confirmationType !== types_1.ConfirmationType.Simulate) {
                    this.committed = true;
                }
                accountSet = new Set();
                this.trades.forEach(function (t) {
                    accountSet.add(t.maker);
                    accountSet.add(t.taker);
                });
                accounts = Array.from(accountSet).sort();
                tradeArgs = this.trades.map(function (t) { return ({
                    makerIndex: accounts.indexOf(t.maker),
                    takerIndex: accounts.indexOf(t.taker),
                    trader: t.trader,
                    data: t.data,
                }); });
                try {
                    return [2 /*return*/, this.contracts.send(this.contracts.perpetualV1.methods.trade(accounts, tradeArgs), options)];
                }
                catch (error) {
                    this.committed = false;
                    throw error;
                }
                return [2 /*return*/];
            });
        });
    };
    TradeOperation.prototype.addTradeArg = function (_a) {
        var maker = _a.maker, taker = _a.taker, trader = _a.trader, data = _a.data;
        if (this.committed) {
            throw new Error('Operation already committed');
        }
        this.trades.push({
            trader: trader,
            data: data,
            maker: maker.toLowerCase(),
            taker: taker.toLowerCase(),
        });
        return this;
    };
    return TradeOperation;
}());
exports.TradeOperation = TradeOperation;
//# sourceMappingURL=TradeOperation.js.map