import BigNumber from 'bignumber.js';
import { Contracts } from './Contracts';
import { address, Balance, BaseValue, CallOptions, Index, Price, PosAndNegValues } from '../lib/types';
export declare class Getters {
    private contracts;
    private perpetual;
    constructor(contracts: Contracts);
    /**
     * Get the margin and position for an account, taking into account unsettled interest.
     */
    getNetAccountBalance(account: address, options?: CallOptions): Promise<Balance>;
    getNetAccountValues(account: address, options?: CallOptions): Promise<PosAndNegValues>;
    getNetAccountCollateralization(account: address, options?: CallOptions): Promise<BigNumber>;
    getNetAccountIsLiquidatable(account: address, options?: CallOptions): Promise<boolean>;
    getAccountBalance(account: address, options?: CallOptions): Promise<Balance>;
    getAccountIndex(account: address, options?: CallOptions): Promise<Index>;
    getIsLocalOperator(account: address, operator: address, options?: CallOptions): Promise<boolean>;
    hasAccountPermissions(account: address, operator: address, options?: CallOptions): Promise<boolean>;
    getAdmin(options?: CallOptions): Promise<address>;
    getIsGlobalOperator(operator: address, options?: CallOptions): Promise<boolean>;
    getTokenContract(options?: CallOptions): Promise<address>;
    getOracleContract(options?: CallOptions): Promise<address>;
    getFunderContract(options?: CallOptions): Promise<address>;
    getGlobalIndex(options?: CallOptions): Promise<Index>;
    getMinCollateral(options?: CallOptions): Promise<BaseValue>;
    getFinalSettlementEnabled(options?: CallOptions): Promise<boolean>;
    getOraclePrice(options?: CallOptions): Promise<Price>;
    private solidityIndexToIndex;
}
