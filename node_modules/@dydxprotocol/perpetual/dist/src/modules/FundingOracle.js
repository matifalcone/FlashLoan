"use strict";
/*

    Copyright 2020 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var types_1 = require("../lib/types");
var FundingOracle = /** @class */ (function () {
    function FundingOracle(contracts) {
        this.contracts = contracts;
    }
    Object.defineProperty(FundingOracle.prototype, "address", {
        get: function () {
            return this.contracts.p1FundingOracle.options.address;
        },
        enumerable: true,
        configurable: true
    });
    // ============ Getters ============
    FundingOracle.prototype.getBounds = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var results, _a, maxAbsValue, maxAbsDiffPerUpdate, maxAbsDiffPerSecond;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([
                            this.contracts.call(this.contracts.p1FundingOracle.methods.MAX_ABS_VALUE(), options),
                            this.contracts.call(this.contracts.p1FundingOracle.methods.MAX_ABS_DIFF_PER_UPDATE(), options),
                            this.contracts.call(this.contracts.p1FundingOracle.methods.MAX_ABS_DIFF_PER_SECOND(), options),
                        ])];
                    case 1:
                        results = _b.sent();
                        _a = __read(results.map(function (s) {
                            return types_1.FundingRate.fromSolidity(s);
                        }), 3), maxAbsValue = _a[0], maxAbsDiffPerUpdate = _a[1], maxAbsDiffPerSecond = _a[2];
                        return [2 /*return*/, { maxAbsValue: maxAbsValue, maxAbsDiffPerUpdate: maxAbsDiffPerUpdate, maxAbsDiffPerSecond: maxAbsDiffPerSecond }];
                }
            });
        });
    };
    FundingOracle.prototype.getFunding = function (timeDelta, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, isPositive, funding;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.contracts.p1FundingOracle.methods.getFunding(new bignumber_js_1.default(timeDelta).toFixed(0)), options)];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), isPositive = _a[0], funding = _a[1];
                        return [2 /*return*/, types_1.BaseValue.fromSolidity(funding, isPositive)];
                }
            });
        });
    };
    FundingOracle.prototype.getFundingRate = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var oneSecondFunding;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getFunding(1, options)];
                    case 1:
                        oneSecondFunding = _a.sent();
                        return [2 /*return*/, new types_1.FundingRate(oneSecondFunding.value)];
                }
            });
        });
    };
    FundingOracle.prototype.getFundingRateProvider = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.call(this.contracts.p1FundingOracle.methods._FUNDING_RATE_PROVIDER_(), options)];
            });
        });
    };
    /**
     * Simulates the result of calling setFundingRate() using `eth_call`.
     */
    FundingOracle.prototype.getBoundedFundingRate = function (fundingRate, options) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.call(this.contracts.p1FundingOracle.methods.setFundingRate(fundingRate.toSoliditySignedInt()), options)];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, types_1.FundingRate.fromSolidity(result.value, result.isPositive)];
                }
            });
        });
    };
    // ============ Admin Functions ============
    /**
     * Set the funding rate.
     *
     * Must be called by the funding rate provider.
     */
    FundingOracle.prototype.setFundingRate = function (fundingRate, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.send(this.contracts.p1FundingOracle.methods.setFundingRate(fundingRate.toSoliditySignedInt()), options)];
            });
        });
    };
    /**
     * Set the funding rate provider.
     *
     * Must be called by the contract owner.
     */
    FundingOracle.prototype.setFundingRateProvider = function (fundingRateProvider, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.contracts.send(this.contracts.p1FundingOracle.methods.setFundingRateProvider(fundingRateProvider), options)];
            });
        });
    };
    return FundingOracle;
}());
exports.FundingOracle = FundingOracle;
//# sourceMappingURL=FundingOracle.js.map