import Web3 from 'web3';
import { ContractSendMethod, Contract } from 'web3-eth-contract';
import { address, CallOptions, Provider, SendOptions } from '../lib/types';
interface Json {
    abi: any;
    networks: {
        [network: number]: any;
    };
}
interface ContractInfo {
    contract: Contract;
    json: Json;
    isTest: boolean;
}
export declare class Contracts {
    private defaultOptions;
    private _cumulativeGasUsed;
    private _gasUsedByFunction;
    protected web3: Web3;
    contractsList: ContractInfo[];
    perpetualProxy: Contract;
    perpetualV1: Contract;
    p1FundingOracle: Contract;
    p1MakerOracle: Contract;
    p1Orders: Contract;
    p1Deleveraging: Contract;
    p1Liquidation: Contract;
    p1LiquidatorProxy: Contract;
    erc20: Contract;
    makerOracle: Contract;
    constructor(provider: Provider, networkId: number, web3: Web3, sendOptions?: SendOptions);
    getCumulativeGasUsed(): number;
    resetGasUsed(): void;
    /**
     * Get a list of gas used by function since last call to resetGasUsed().
     *
     * Empty unless DEBUG_GAS_USAGE_BY_FUNCTION was set.
     */
    getGasUsedByFunction(): Iterable<{
        name: string;
        gasUsed: number;
    }>;
    setProvider(provider: Provider, networkId: number): void;
    setDefaultAccount(account: address): void;
    call(method: ContractSendMethod, specificOptions?: CallOptions): Promise<any>;
    send(method: ContractSendMethod, specificOptions?: SendOptions): Promise<any>;
    protected addContract(json: Json, isTest?: boolean): Contract;
    private setContractProvider;
    private _send;
    private estimateGas;
}
export {};
