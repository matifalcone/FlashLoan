"use strict";
/*

    Copyright 2020 dYdX Trading Inc.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

*/
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var types_1 = require("../lib/types");
// JSON
var PerpetualProxy_json_1 = __importDefault(require("../../build/contracts/PerpetualProxy.json"));
var PerpetualV1_json_1 = __importDefault(require("../../build/contracts/PerpetualV1.json"));
var P1FundingOracle_json_1 = __importDefault(require("../../build/contracts/P1FundingOracle.json"));
var P1MakerOracle_json_1 = __importDefault(require("../../build/contracts/P1MakerOracle.json"));
var P1Orders_json_1 = __importDefault(require("../../build/contracts/P1Orders.json"));
var P1Deleveraging_json_1 = __importDefault(require("../../build/contracts/P1Deleveraging.json"));
var P1Liquidation_json_1 = __importDefault(require("../../build/contracts/P1Liquidation.json"));
var P1LiquidatorProxy_json_1 = __importDefault(require("../../build/contracts/P1LiquidatorProxy.json"));
var ERC20_json_1 = __importDefault(require("../../build/contracts/ERC20.json"));
var I_MakerOracle_json_1 = __importDefault(require("../../build/contracts/I_MakerOracle.json"));
var OUTCOMES;
(function (OUTCOMES) {
    OUTCOMES[OUTCOMES["INITIAL"] = 0] = "INITIAL";
    OUTCOMES[OUTCOMES["RESOLVED"] = 1] = "RESOLVED";
    OUTCOMES[OUTCOMES["REJECTED"] = 2] = "REJECTED";
})(OUTCOMES || (OUTCOMES = {}));
var Contracts = /** @class */ (function () {
    function Contracts(provider, networkId, web3, sendOptions) {
        if (sendOptions === void 0) { sendOptions = {}; }
        this._cumulativeGasUsed = 0;
        this._gasUsedByFunction = [];
        // Contract instances
        this.contractsList = [];
        this.web3 = web3;
        this.defaultOptions = __assign({ gas: null, gasPrice: 1000000000, value: 0, from: null, confirmations: 0, confirmationType: types_1.ConfirmationType.Confirmed, gasMultiplier: 1.5 }, sendOptions);
        // Contracts
        this.perpetualProxy = this.addContract(PerpetualProxy_json_1.default);
        this.perpetualV1 = this.addContract(PerpetualV1_json_1.default);
        this.p1FundingOracle = this.addContract(P1FundingOracle_json_1.default);
        this.p1MakerOracle = this.addContract(P1MakerOracle_json_1.default);
        this.p1Orders = this.addContract(P1Orders_json_1.default);
        this.p1Deleveraging = this.addContract(P1Deleveraging_json_1.default);
        this.p1Liquidation = this.addContract(P1Liquidation_json_1.default);
        this.p1LiquidatorProxy = this.addContract(P1LiquidatorProxy_json_1.default);
        this.erc20 = this.addContract(ERC20_json_1.default, true);
        this.makerOracle = this.addContract(I_MakerOracle_json_1.default, true);
        this.setProvider(provider, networkId);
        this.setDefaultAccount(this.web3.eth.defaultAccount);
    }
    Contracts.prototype.getCumulativeGasUsed = function () {
        return this._cumulativeGasUsed;
    };
    Contracts.prototype.resetGasUsed = function () {
        this._cumulativeGasUsed = 0;
        this._gasUsedByFunction = []; // leave work for garbage collector
    };
    /**
     * Get a list of gas used by function since last call to resetGasUsed().
     *
     * Empty unless DEBUG_GAS_USAGE_BY_FUNCTION was set.
     */
    Contracts.prototype.getGasUsedByFunction = function () {
        var _a, _b, gasUsed, e_1_1;
        var e_1, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _d.trys.push([0, 5, 6, 7]);
                    _a = __values(this._gasUsedByFunction), _b = _a.next();
                    _d.label = 1;
                case 1:
                    if (!!_b.done) return [3 /*break*/, 4];
                    gasUsed = _b.value;
                    return [4 /*yield*/, gasUsed];
                case 2:
                    _d.sent();
                    _d.label = 3;
                case 3:
                    _b = _a.next();
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 7];
                case 5:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 7];
                case 6:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 7: return [2 /*return*/];
            }
        });
    };
    Contracts.prototype.setProvider = function (provider, networkId) {
        var _this = this;
        this.contractsList.forEach(function (contract) { return _this.setContractProvider(contract.contract, contract.json, provider, networkId); });
    };
    Contracts.prototype.setDefaultAccount = function (account) {
        this.contractsList.forEach(function (contract) { return contract.contract.options.from = account; });
    };
    Contracts.prototype.call = function (method, specificOptions) {
        if (specificOptions === void 0) { specificOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var _a, blockNumber, confirmations, confirmationType, gasMultiplier, otherOptions;
            return __generator(this, function (_b) {
                _a = __assign(__assign({}, this.defaultOptions), specificOptions), blockNumber = _a.blockNumber, confirmations = _a.confirmations, confirmationType = _a.confirmationType, gasMultiplier = _a.gasMultiplier, otherOptions = __rest(_a, ["blockNumber", "confirmations", "confirmationType", "gasMultiplier"]);
                return [2 /*return*/, method.call(otherOptions)];
            });
        });
    };
    Contracts.prototype.send = function (method, specificOptions) {
        if (specificOptions === void 0) { specificOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var sendOptions, result, contract, contractInfo, gasUsed;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        sendOptions = __assign(__assign({}, this.defaultOptions), specificOptions);
                        return [4 /*yield*/, this._send(method, sendOptions)];
                    case 1:
                        result = _a.sent();
                        if (sendOptions.confirmationType === types_1.ConfirmationType.Confirmed ||
                            sendOptions.confirmationType === types_1.ConfirmationType.Both) {
                            contract = method._parent;
                            contractInfo = lodash_1.default.find(this.contractsList, { contract: contract });
                            if (contractInfo && !contractInfo.isTest) {
                                gasUsed = result.gasUsed;
                                this._cumulativeGasUsed += gasUsed;
                                if (process.env.DEBUG_GAS_USAGE_BY_FUNCTION === 'true') {
                                    this._gasUsedByFunction.push({ gasUsed: gasUsed, name: method._method.name });
                                }
                            }
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    // ============ Helper Functions ============
    Contracts.prototype.addContract = function (json, isTest) {
        if (isTest === void 0) { isTest = false; }
        var contract = new this.web3.eth.Contract(json.abi);
        this.contractsList.push({ contract: contract, json: json, isTest: isTest });
        return contract;
    };
    Contracts.prototype.setContractProvider = function (contract, contractJson, provider, networkId) {
        contract.setProvider(provider);
        var json = (contract === this.perpetualV1)
            ? lodash_1.default.find(this.contractsList, { contract: this.perpetualProxy }).json
            : contractJson;
        contract.options.address = json.networks[networkId] && json.networks[networkId].address;
    };
    Contracts.prototype._send = function (// tslint:disable-line:function-name
    method, sendOptions) {
        if (sendOptions === void 0) { sendOptions = {}; }
        return __awaiter(this, void 0, void 0, function () {
            var confirmations, confirmationType, gasMultiplier, remainingOptions, txOptions, gasEstimate, promi, hashOutcome, confirmationOutcome, transactionHash, hashPromise, confirmationPromise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        confirmations = sendOptions.confirmations, confirmationType = sendOptions.confirmationType, gasMultiplier = sendOptions.gasMultiplier, remainingOptions = __rest(sendOptions, ["confirmations", "confirmationType", "gasMultiplier"]);
                        txOptions = remainingOptions;
                        if (!Object.values(types_1.ConfirmationType).includes(confirmationType)) {
                            throw new Error("Invalid confirmation type: " + confirmationType);
                        }
                        if (!(confirmationType === types_1.ConfirmationType.Simulate || !txOptions.gas)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.estimateGas(method, txOptions)];
                    case 1:
                        gasEstimate = _a.sent();
                        txOptions.gas = Math.floor(gasEstimate * gasMultiplier);
                        if (confirmationType === types_1.ConfirmationType.Simulate) {
                            return [2 /*return*/, {
                                    gasEstimate: gasEstimate,
                                    gas: txOptions.gas,
                                }];
                        }
                        _a.label = 2;
                    case 2:
                        promi = method.send(txOptions);
                        hashOutcome = OUTCOMES.INITIAL;
                        confirmationOutcome = OUTCOMES.INITIAL;
                        if (![
                            types_1.ConfirmationType.Hash,
                            types_1.ConfirmationType.Both,
                        ].includes(confirmationType)) return [3 /*break*/, 4];
                        hashPromise = new Promise(function (resolve, reject) {
                            promi.on('error', function (error) {
                                if (hashOutcome === OUTCOMES.INITIAL) {
                                    hashOutcome = OUTCOMES.REJECTED;
                                    reject(error);
                                    promi.off();
                                }
                            });
                            promi.on('transactionHash', function (txHash) {
                                if (hashOutcome === OUTCOMES.INITIAL) {
                                    hashOutcome = OUTCOMES.RESOLVED;
                                    resolve(txHash);
                                    if (confirmationType !== types_1.ConfirmationType.Both) {
                                        promi.off();
                                    }
                                }
                            });
                        });
                        return [4 /*yield*/, hashPromise];
                    case 3:
                        transactionHash = _a.sent();
                        _a.label = 4;
                    case 4:
                        if ([
                            types_1.ConfirmationType.Confirmed,
                            types_1.ConfirmationType.Both,
                        ].includes(confirmationType)) {
                            confirmationPromise = new Promise(function (resolve, reject) {
                                promi.on('error', function (error) {
                                    if (confirmationOutcome === OUTCOMES.INITIAL
                                        && (confirmationType === types_1.ConfirmationType.Confirmed
                                            || hashOutcome === OUTCOMES.RESOLVED)) {
                                        confirmationOutcome = OUTCOMES.REJECTED;
                                        reject(error);
                                        promi.off();
                                    }
                                });
                                if (confirmations) {
                                    promi.on('confirmation', function (confNumber, receipt) {
                                        if (confNumber >= confirmations) {
                                            if (confirmationOutcome === OUTCOMES.INITIAL) {
                                                confirmationOutcome = OUTCOMES.RESOLVED;
                                                resolve(receipt);
                                                promi.off();
                                            }
                                        }
                                    });
                                }
                                else {
                                    promi.on('receipt', function (receipt) {
                                        confirmationOutcome = OUTCOMES.RESOLVED;
                                        resolve(receipt);
                                        promi.off();
                                    });
                                }
                            });
                        }
                        if (confirmationType === types_1.ConfirmationType.Hash) {
                            return [2 /*return*/, { transactionHash: transactionHash }];
                        }
                        if (confirmationType === types_1.ConfirmationType.Confirmed) {
                            return [2 /*return*/, confirmationPromise];
                        }
                        return [2 /*return*/, {
                                transactionHash: transactionHash,
                                confirmation: confirmationPromise,
                            }];
                }
            });
        });
    };
    Contracts.prototype.estimateGas = function (method, txOptions) {
        return __awaiter(this, void 0, void 0, function () {
            var gasEstimate, error_1, from, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, method.estimateGas(txOptions)];
                    case 1:
                        gasEstimate = _a.sent();
                        return [2 /*return*/, gasEstimate];
                    case 2:
                        error_1 = _a.sent();
                        from = txOptions.from, value = txOptions.value;
                        error_1.transactionData = {
                            from: from,
                            value: value,
                            data: method.encodeABI(),
                            to: method._parent._address,
                        };
                        throw error_1;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return Contracts;
}());
exports.Contracts = Contracts;
//# sourceMappingURL=Contracts.js.map